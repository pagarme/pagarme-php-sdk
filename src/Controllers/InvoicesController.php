<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Controllers;

use PagarmeApiSDKLib\Exceptions\ApiException;
use PagarmeApiSDKLib\ApiHelper;
use PagarmeApiSDKLib\ConfigurationInterface;
use PagarmeApiSDKLib\Utils\DateTimeHelper;
use PagarmeApiSDKLib\Http\HttpRequest;
use PagarmeApiSDKLib\Http\HttpResponse;
use PagarmeApiSDKLib\Http\HttpMethod;
use PagarmeApiSDKLib\Http\HttpContext;
use PagarmeApiSDKLib\Http\HttpCallBack;
use Unirest\Request;

class InvoicesController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Create an Invoice
     *
     * @param string $subscriptionId Subscription Id
     * @param string $cycleId Cycle Id
     * @param \PagarmeApiSDKLib\Models\CreateInvoiceRequest|null $request
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createInvoice(
        string $subscriptionId,
        string $cycleId,
        ?\PagarmeApiSDKLib\Models\CreateInvoiceRequest $request = null,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetInvoiceResponse {
        //prepare query string for API call
        $_queryBuilder = '/subscriptions/{subscription_id}/cycles/{cycle_id}/pay';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'subscription_id' => $subscriptionId,
            'cycle_id'        => $cycleId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($request);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetInvoiceResponse');
    }

    /**
     * Gets all invoices
     *
     * @param int|null $page Page number
     * @param int|null $size Page size
     * @param string|null $code Filter for Invoice's code
     * @param string|null $customerId Filter for Invoice's customer id
     * @param string|null $subscriptionId Filter for Invoice's subscription id
     * @param \DateTime|null $createdSince Filter for Invoice's creation date start range
     * @param \DateTime|null $createdUntil Filter for Invoices creation date end range
     * @param string|null $status Filter for Invoice's status
     * @param \DateTime|null $dueSince Filter for Invoice's due date start range
     * @param \DateTime|null $dueUntil Filter for Invoice's due date end range
     * @param string|null $customerDocument
     *
     * @return \PagarmeApiSDKLib\Models\ListInvoicesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInvoices(
        ?int $page = null,
        ?int $size = null,
        ?string $code = null,
        ?string $customerId = null,
        ?string $subscriptionId = null,
        ?\DateTime $createdSince = null,
        ?\DateTime $createdUntil = null,
        ?string $status = null,
        ?\DateTime $dueSince = null,
        ?\DateTime $dueUntil = null,
        ?string $customerDocument = null
    ): \PagarmeApiSDKLib\Models\ListInvoicesResponse {
        //prepare query string for API call
        $_queryBuilder = '/invoices';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page'              => $page,
            'size'              => $size,
            'code'              => $code,
            'customer_id'       => $customerId,
            'subscription_id'   => $subscriptionId,
            'created_since'     => DateTimeHelper::toRfc3339DateTime($createdSince),
            'created_until'     => DateTimeHelper::toRfc3339DateTime($createdUntil),
            'status'            => $status,
            'due_since'         => DateTimeHelper::toRfc3339DateTime($dueSince),
            'due_until'         => DateTimeHelper::toRfc3339DateTime($dueUntil),
            'customer_document' => $customerDocument,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'      => self::$userAgent,
            'Accept'          => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\ListInvoicesResponse');
    }

    /**
     * Cancels an invoice
     *
     * @param string $invoiceId Invoice id
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cancelInvoice(
        string $invoiceId,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetInvoiceResponse {
        //prepare query string for API call
        $_queryBuilder = '/invoices/{invoice_id}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'invoice_id'      => $invoiceId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::delete($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetInvoiceResponse');
    }

    /**
     * Updates the metadata from an invoice
     *
     * @param string $invoiceId The invoice id
     * @param \PagarmeApiSDKLib\Models\UpdateMetadataRequest $request Request for updating the
     *        invoice metadata
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateInvoiceMetadata(
        string $invoiceId,
        \PagarmeApiSDKLib\Models\UpdateMetadataRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetInvoiceResponse {
        //prepare query string for API call
        $_queryBuilder = '/invoices/{invoice_id}/metadata';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'invoice_id'      => $invoiceId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($request);

        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::patch($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetInvoiceResponse');
    }

    /**
     * @param string $subscriptionId Subscription Id
     *
     * @return \PagarmeApiSDKLib\Models\GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPartialInvoice(string $subscriptionId): \PagarmeApiSDKLib\Models\GetInvoiceResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/subscriptions/{subscription_id}/partial-invoice';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'subscription_id' => $subscriptionId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetInvoiceResponse');
    }

    /**
     * Updates the status from an invoice
     *
     * @param string $invoiceId Invoice Id
     * @param \PagarmeApiSDKLib\Models\UpdateInvoiceStatusRequest $request Request for updating an
     *        invoice's status
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateInvoiceStatus(
        string $invoiceId,
        \PagarmeApiSDKLib\Models\UpdateInvoiceStatusRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetInvoiceResponse {
        //prepare query string for API call
        $_queryBuilder = '/invoices/{invoice_id}/status';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'invoice_id'      => $invoiceId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = Request\Body::Json($request);

        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::patch($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetInvoiceResponse');
    }

    /**
     * Gets an invoice
     *
     * @param string $invoiceId Invoice Id
     *
     * @return \PagarmeApiSDKLib\Models\GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInvoice(string $invoiceId): \PagarmeApiSDKLib\Models\GetInvoiceResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/invoices/{invoice_id}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'invoice_id' => $invoiceId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetInvoiceResponse');
    }
}
