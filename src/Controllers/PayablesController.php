<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use PagarmeApiSDKLib\Exceptions\ApiException;
use PagarmeApiSDKLib\Models\GetPayableResponse;
use PagarmeApiSDKLib\Models\ListPayablesResponse;
use PagarmeApiSDKLib\Utils\DateTimeHelper;

class PayablesController extends BaseController
{
    /**
     * @param string|null $type
     * @param string|null $splitId
     * @param string|null $bulkAnticipationId
     * @param int|null $installment
     * @param string|null $status
     * @param string|null $recipientId
     * @param int|null $amount
     * @param string|null $chargeId
     * @param string|null $paymentDateUntil
     * @param \DateTime|null $paymentDateSince
     * @param \DateTime|null $updatedUntil
     * @param \DateTime|null $updatedSince
     * @param \DateTime|null $createdUntil
     * @param \DateTime|null $createdSince
     * @param string|null $liquidationArrangementId
     * @param int|null $page
     * @param int|null $size
     * @param int|null $gatewayId
     *
     * @return ListPayablesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPayables(
        ?string $type = null,
        ?string $splitId = null,
        ?string $bulkAnticipationId = null,
        ?int $installment = null,
        ?string $status = null,
        ?string $recipientId = null,
        ?int $amount = null,
        ?string $chargeId = null,
        ?string $paymentDateUntil = null,
        ?\DateTime $paymentDateSince = null,
        ?\DateTime $updatedUntil = null,
        ?\DateTime $updatedSince = null,
        ?\DateTime $createdUntil = null,
        ?\DateTime $createdSince = null,
        ?string $liquidationArrangementId = null,
        ?int $page = null,
        ?int $size = null,
        ?int $gatewayId = null
    ): ListPayablesResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/payables')
            ->auth('global')
            ->parameters(
                QueryParam::init('type', $type),
                QueryParam::init('split_id', $splitId),
                QueryParam::init('bulk_anticipation_id', $bulkAnticipationId),
                QueryParam::init('installment', $installment),
                QueryParam::init('status', $status),
                QueryParam::init('recipient_id', $recipientId),
                QueryParam::init('amount', $amount),
                QueryParam::init('charge_id', $chargeId),
                QueryParam::init('payment_date_until', $paymentDateUntil),
                QueryParam::init('payment_date_since', $paymentDateSince)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('updated_until', $updatedUntil)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('updated_since', $updatedSince)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('created_until', $createdUntil)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('created_since', $createdSince)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('liquidation_arrangement_id', $liquidationArrangementId),
                QueryParam::init('page', $page),
                QueryParam::init('size', $size),
                QueryParam::init('gateway_id', $gatewayId)
            );

        $_resHandler = $this->responseHandler()->type(ListPayablesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $id
     *
     * @return GetPayableResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPayableById(int $id): GetPayableResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/payables/{id}')
            ->auth('global')
            ->parameters(TemplateParam::init('id', $id));

        $_resHandler = $this->responseHandler()->type(GetPayableResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
