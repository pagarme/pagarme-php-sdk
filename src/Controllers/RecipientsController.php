<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Controllers;

use PagarmeApiSDKLib\Exceptions\ApiException;
use PagarmeApiSDKLib\ApiHelper;
use PagarmeApiSDKLib\ConfigurationInterface;
use PagarmeApiSDKLib\Utils\DateTimeHelper;
use PagarmeApiSDKLib\Http\HttpRequest;
use PagarmeApiSDKLib\Http\HttpResponse;
use PagarmeApiSDKLib\Http\HttpMethod;
use PagarmeApiSDKLib\Http\HttpContext;
use PagarmeApiSDKLib\Http\HttpCallBack;
use Unirest\Request;

class RecipientsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Updates a recipient
     *
     * @param string $recipientId Recipient id
     * @param \PagarmeApiSDKLib\Models\UpdateRecipientRequest $request Recipient data
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateRecipient(
        string $recipientId,
        \PagarmeApiSDKLib\Models\UpdateRecipientRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetRecipientResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::put($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * Creates an anticipation
     *
     * @param string $recipientId Recipient id
     * @param \PagarmeApiSDKLib\Models\CreateAnticipationRequest $request Anticipation data
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetAnticipationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAnticipation(
        string $recipientId,
        \PagarmeApiSDKLib\Models\CreateAnticipationRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetAnticipationResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/anticipations';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetAnticipationResponse');
    }

    /**
     * Gets the anticipation limits for a recipient
     *
     * @param string $recipientId Recipient id
     * @param string $timeframe Timeframe
     * @param \DateTime $paymentDate Anticipation payment date
     *
     * @return \PagarmeApiSDKLib\Models\GetAnticipationLimitResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAnticipationLimits(
        string $recipientId,
        string $timeframe,
        \DateTime $paymentDate
    ): \PagarmeApiSDKLib\Models\GetAnticipationLimitResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/anticipation_limits';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id' => $recipientId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'timeframe'    => $timeframe,
            'payment_date' => DateTimeHelper::toRfc3339DateTime($paymentDate),
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetAnticipationLimitResponse');
    }

    /**
     * Retrieves paginated recipients information
     *
     * @param int|null $page Page number
     * @param int|null $size Page size
     *
     * @return \PagarmeApiSDKLib\Models\ListRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getRecipients(?int $page = null, ?int $size = null): \PagarmeApiSDKLib\Models\ListRecipientResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/recipients';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page' => $page,
            'size' => $size,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\ListRecipientResponse');
    }

    /**
     * Updates recipient metadata
     *
     * @param string $recipientId Recipient id
     * @param \PagarmeApiSDKLib\Models\UpdateMetadataRequest $request Metadata
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateRecipientMetadata(
        string $recipientId,
        \PagarmeApiSDKLib\Models\UpdateMetadataRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetRecipientResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/metadata';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::patch($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * Gets a transfer
     *
     * @param string $recipientId Recipient id
     * @param string $transferId Transfer id
     *
     * @return \PagarmeApiSDKLib\Models\GetTransferResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTransfer(string $recipientId, string $transferId): \PagarmeApiSDKLib\Models\GetTransferResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/transfers/{transfer_id}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id' => $recipientId,
            'transfer_id'  => $transferId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetTransferResponse');
    }

    /**
     * Gets an anticipation
     *
     * @param string $recipientId Recipient id
     * @param string $anticipationId Anticipation id
     *
     * @return \PagarmeApiSDKLib\Models\GetAnticipationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAnticipation(
        string $recipientId,
        string $anticipationId
    ): \PagarmeApiSDKLib\Models\GetAnticipationResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/anticipations/{anticipation_id}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
            'anticipation_id' => $anticipationId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetAnticipationResponse');
    }

    /**
     * @param string $recipientId Recipient Identificator
     * @param \PagarmeApiSDKLib\Models\UpdateTransferSettingsRequest $request
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateRecipientTransferSettings(
        string $recipientId,
        \PagarmeApiSDKLib\Models\UpdateTransferSettingsRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetRecipientResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/transfer-settings';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::patch($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * Retrieves a paginated list of anticipations from a recipient
     *
     * @param string $recipientId Recipient id
     * @param int|null $page Page number
     * @param int|null $size Page size
     * @param string|null $status Filter for anticipation status
     * @param string|null $timeframe Filter for anticipation timeframe
     * @param \DateTime|null $paymentDateSince Filter for start range for anticipation payment date
     * @param \DateTime|null $paymentDateUntil Filter for end range for anticipation payment date
     * @param \DateTime|null $createdSince Filter for start range for anticipation creation date
     * @param \DateTime|null $createdUntil Filter for end range for anticipation creation date
     *
     * @return \PagarmeApiSDKLib\Models\ListAnticipationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAnticipations(
        string $recipientId,
        ?int $page = null,
        ?int $size = null,
        ?string $status = null,
        ?string $timeframe = null,
        ?\DateTime $paymentDateSince = null,
        ?\DateTime $paymentDateUntil = null,
        ?\DateTime $createdSince = null,
        ?\DateTime $createdUntil = null
    ): \PagarmeApiSDKLib\Models\ListAnticipationResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/anticipations';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'       => $recipientId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page'               => $page,
            'size'               => $size,
            'status'             => $status,
            'timeframe'          => $timeframe,
            'payment_date_since' => DateTimeHelper::toRfc3339DateTime($paymentDateSince),
            'payment_date_until' => DateTimeHelper::toRfc3339DateTime($paymentDateUntil),
            'created_since'      => DateTimeHelper::toRfc3339DateTime($createdSince),
            'created_until'      => DateTimeHelper::toRfc3339DateTime($createdUntil),
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'       => self::$userAgent,
            'Accept'           => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\ListAnticipationResponse');
    }

    /**
     * Updates the default bank account from a recipient
     *
     * @param string $recipientId Recipient id
     * @param \PagarmeApiSDKLib\Models\UpdateRecipientBankAccountRequest $request Bank account data
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateRecipientDefaultBankAccount(
        string $recipientId,
        \PagarmeApiSDKLib\Models\UpdateRecipientBankAccountRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetRecipientResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/default-bank-account';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::patch($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * @param string $recipientId
     * @param \PagarmeApiSDKLib\Models\CreateWithdrawRequest $request
     *
     * @return \PagarmeApiSDKLib\Models\GetWithdrawResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createWithdraw(
        string $recipientId,
        \PagarmeApiSDKLib\Models\CreateWithdrawRequest $request
    ): \PagarmeApiSDKLib\Models\GetWithdrawResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/withdrawals';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id' => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetWithdrawResponse');
    }

    /**
     * Get balance information for a recipient
     *
     * @param string $recipientId Recipient id
     *
     * @return \PagarmeApiSDKLib\Models\GetBalanceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getBalance(string $recipientId): \PagarmeApiSDKLib\Models\GetBalanceResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/balance';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id' => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetBalanceResponse');
    }

    /**
     * Creates a transfer for a recipient
     *
     * @param string $recipientId Recipient Id
     * @param \PagarmeApiSDKLib\Models\CreateTransferRequest $request Transfer data
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetTransferResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createTransfer(
        string $recipientId,
        \PagarmeApiSDKLib\Models\CreateTransferRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetTransferResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/transfers';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetTransferResponse');
    }

    /**
     * Creates a new recipient
     *
     * @param \PagarmeApiSDKLib\Models\CreateRecipientRequest $request Recipient data
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createRecipient(
        \PagarmeApiSDKLib\Models\CreateRecipientRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetRecipientResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * Updates recipient metadata
     *
     * @param string $recipientId Recipient id
     * @param \PagarmeApiSDKLib\Models\UpdateAutomaticAnticipationSettingsRequest $request Metadata
     * @param string|null $idempotencyKey
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateAutomaticAnticipationSettings(
        string $recipientId,
        \PagarmeApiSDKLib\Models\UpdateAutomaticAnticipationSettingsRequest $request,
        ?string $idempotencyKey = null
    ): \PagarmeApiSDKLib\Models\GetRecipientResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/automatic-anticipation-settings';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'    => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json',
            'idempotency-key' => $idempotencyKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::patch($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * Retrieves recipient information
     *
     * @param string $recipientId Recipiend id
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getRecipient(string $recipientId): \PagarmeApiSDKLib\Models\GetRecipientResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id' => $recipientId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * Gets a paginated list of transfers for the recipient
     *
     * @param string $recipientId
     * @param int|null $page
     * @param int|null $size
     * @param string|null $status
     * @param \DateTime|null $createdSince
     * @param \DateTime|null $createdUntil
     *
     * @return \PagarmeApiSDKLib\Models\ListWithdrawals Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getWithdrawals(
        string $recipientId,
        ?int $page = null,
        ?int $size = null,
        ?string $status = null,
        ?\DateTime $createdSince = null,
        ?\DateTime $createdUntil = null
    ): \PagarmeApiSDKLib\Models\ListWithdrawals {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/withdrawals';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'  => $recipientId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page'          => $page,
            'size'          => $size,
            'status'        => $status,
            'created_since' => DateTimeHelper::toRfc3339DateTime($createdSince),
            'created_until' => DateTimeHelper::toRfc3339DateTime($createdUntil),
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\ListWithdrawals');
    }

    /**
     * @param string $recipientId
     * @param string $withdrawalId
     *
     * @return \PagarmeApiSDKLib\Models\GetWithdrawResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getWithdrawById(
        string $recipientId,
        string $withdrawalId
    ): \PagarmeApiSDKLib\Models\GetWithdrawResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/withdrawals/{withdrawal_id}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'  => $recipientId,
            'withdrawal_id' => $withdrawalId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetWithdrawResponse');
    }

    /**
     * Gets a paginated list of transfers for the recipient
     *
     * @param string $recipientId Recipient id
     * @param int|null $page Page number
     * @param int|null $size Page size
     * @param string|null $status Filter for transfer status
     * @param \DateTime|null $createdSince Filter for start range of transfer creation date
     * @param \DateTime|null $createdUntil Filter for end range of transfer creation date
     *
     * @return \PagarmeApiSDKLib\Models\ListTransferResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTransfers(
        string $recipientId,
        ?int $page = null,
        ?int $size = null,
        ?string $status = null,
        ?\DateTime $createdSince = null,
        ?\DateTime $createdUntil = null
    ): \PagarmeApiSDKLib\Models\ListTransferResponse {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{recipient_id}/transfers';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'recipient_id'  => $recipientId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page'          => $page,
            'size'          => $size,
            'status'        => $status,
            'created_since' => DateTimeHelper::toRfc3339DateTime($createdSince),
            'created_until' => DateTimeHelper::toRfc3339DateTime($createdUntil),
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\ListTransferResponse');
    }

    /**
     * Retrieves recipient information
     *
     * @param string $code Recipient code
     *
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getRecipientByCode(string $code): \PagarmeApiSDKLib\Models\GetRecipientResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/recipients/{code}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'code' => $code,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }

    /**
     * @return \PagarmeApiSDKLib\Models\GetRecipientResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getDefaultRecipient(): \PagarmeApiSDKLib\Models\GetRecipientResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/recipients/default';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        $mapper = $this->getJsonMapper();
        return $mapper->mapClass($response->body, 'PagarmeApiSDKLib\\Models\\GetRecipientResponse');
    }
}
