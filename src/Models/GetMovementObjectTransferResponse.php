<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use stdClass;

/**
 * @discriminator object
 * @discriminatorType transfer
 */
class GetMovementObjectTransferResponse extends GetMovementObjectBaseResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $sourceType = [];

    /**
     * @var array
     */
    private $sourceId = [];

    /**
     * @var array
     */
    private $targetType = [];

    /**
     * @var array
     */
    private $targetId = [];

    /**
     * @var array
     */
    private $fee = [];

    /**
     * @var array
     */
    private $fundingDate = [];

    /**
     * @var array
     */
    private $fundingEstimatedDate = [];

    /**
     * @var array
     */
    private $bankAccount = [];

    /**
     * Returns Source Type.
     */
    public function getSourceType(): ?string
    {
        if (count($this->sourceType) == 0) {
            return null;
        }
        return $this->sourceType['value'];
    }

    /**
     * Sets Source Type.
     *
     * @maps source_type
     */
    public function setSourceType(?string $sourceType): void
    {
        $this->sourceType['value'] = $sourceType;
    }

    /**
     * Unsets Source Type.
     */
    public function unsetSourceType(): void
    {
        $this->sourceType = [];
    }

    /**
     * Returns Source Id.
     */
    public function getSourceId(): ?string
    {
        if (count($this->sourceId) == 0) {
            return null;
        }
        return $this->sourceId['value'];
    }

    /**
     * Sets Source Id.
     *
     * @maps source_id
     */
    public function setSourceId(?string $sourceId): void
    {
        $this->sourceId['value'] = $sourceId;
    }

    /**
     * Unsets Source Id.
     */
    public function unsetSourceId(): void
    {
        $this->sourceId = [];
    }

    /**
     * Returns Target Type.
     */
    public function getTargetType(): ?string
    {
        if (count($this->targetType) == 0) {
            return null;
        }
        return $this->targetType['value'];
    }

    /**
     * Sets Target Type.
     *
     * @maps target_type
     */
    public function setTargetType(?string $targetType): void
    {
        $this->targetType['value'] = $targetType;
    }

    /**
     * Unsets Target Type.
     */
    public function unsetTargetType(): void
    {
        $this->targetType = [];
    }

    /**
     * Returns Target Id.
     */
    public function getTargetId(): ?string
    {
        if (count($this->targetId) == 0) {
            return null;
        }
        return $this->targetId['value'];
    }

    /**
     * Sets Target Id.
     *
     * @maps target_id
     */
    public function setTargetId(?string $targetId): void
    {
        $this->targetId['value'] = $targetId;
    }

    /**
     * Unsets Target Id.
     */
    public function unsetTargetId(): void
    {
        $this->targetId = [];
    }

    /**
     * Returns Fee.
     */
    public function getFee(): ?string
    {
        if (count($this->fee) == 0) {
            return null;
        }
        return $this->fee['value'];
    }

    /**
     * Sets Fee.
     *
     * @maps fee
     */
    public function setFee(?string $fee): void
    {
        $this->fee['value'] = $fee;
    }

    /**
     * Unsets Fee.
     */
    public function unsetFee(): void
    {
        $this->fee = [];
    }

    /**
     * Returns Funding Date.
     */
    public function getFundingDate(): ?string
    {
        if (count($this->fundingDate) == 0) {
            return null;
        }
        return $this->fundingDate['value'];
    }

    /**
     * Sets Funding Date.
     *
     * @maps funding_date
     */
    public function setFundingDate(?string $fundingDate): void
    {
        $this->fundingDate['value'] = $fundingDate;
    }

    /**
     * Unsets Funding Date.
     */
    public function unsetFundingDate(): void
    {
        $this->fundingDate = [];
    }

    /**
     * Returns Funding Estimated Date.
     */
    public function getFundingEstimatedDate(): ?string
    {
        if (count($this->fundingEstimatedDate) == 0) {
            return null;
        }
        return $this->fundingEstimatedDate['value'];
    }

    /**
     * Sets Funding Estimated Date.
     *
     * @maps funding_estimated_date
     */
    public function setFundingEstimatedDate(?string $fundingEstimatedDate): void
    {
        $this->fundingEstimatedDate['value'] = $fundingEstimatedDate;
    }

    /**
     * Unsets Funding Estimated Date.
     */
    public function unsetFundingEstimatedDate(): void
    {
        $this->fundingEstimatedDate = [];
    }

    /**
     * Returns Bank Account.
     */
    public function getBankAccount(): ?string
    {
        if (count($this->bankAccount) == 0) {
            return null;
        }
        return $this->bankAccount['value'];
    }

    /**
     * Sets Bank Account.
     *
     * @maps bank_account
     */
    public function setBankAccount(?string $bankAccount): void
    {
        $this->bankAccount['value'] = $bankAccount;
    }

    /**
     * Unsets Bank Account.
     */
    public function unsetBankAccount(): void
    {
        $this->bankAccount = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->sourceType)) {
            $json['source_type']            = $this->sourceType['value'];
        }
        if (!empty($this->sourceId)) {
            $json['source_id']              = $this->sourceId['value'];
        }
        if (!empty($this->targetType)) {
            $json['target_type']            = $this->targetType['value'];
        }
        if (!empty($this->targetId)) {
            $json['target_id']              = $this->targetId['value'];
        }
        if (!empty($this->fee)) {
            $json['fee']                    = $this->fee['value'];
        }
        if (!empty($this->fundingDate)) {
            $json['funding_date']           = $this->fundingDate['value'];
        }
        if (!empty($this->fundingEstimatedDate)) {
            $json['funding_estimated_date'] = $this->fundingEstimatedDate['value'];
        }
        if (!empty($this->bankAccount)) {
            $json['bank_account']           = $this->bankAccount['value'];
        }
        $json = array_merge($json, parent::jsonSerialize(true));
        $json['object'] = $this->getObject() ?? 'transfer';

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
