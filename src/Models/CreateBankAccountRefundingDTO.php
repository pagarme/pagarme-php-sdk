<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use stdClass;

/**
 * Bank Account
 */
class CreateBankAccountRefundingDTO implements \JsonSerializable
{
    /**
     * @var string
     */
    private $holderName;

    /**
     * @var string
     */
    private $holderType;

    /**
     * @var string
     */
    private $holderDocument;

    /**
     * @var string
     */
    private $bank;

    /**
     * @var string
     */
    private $branchNumber;

    /**
     * @var string
     */
    private $branchCheckDigit;

    /**
     * @var string
     */
    private $accountNumber;

    /**
     * @var string
     */
    private $accountCheckDigit;

    /**
     * @var string
     */
    private $type;

    /**
     * @param string $holderName
     * @param string $holderType
     * @param string $holderDocument
     * @param string $bank
     * @param string $branchNumber
     * @param string $branchCheckDigit
     * @param string $accountNumber
     * @param string $accountCheckDigit
     * @param string $type
     */
    public function __construct(
        string $holderName,
        string $holderType,
        string $holderDocument,
        string $bank,
        string $branchNumber,
        string $branchCheckDigit,
        string $accountNumber,
        string $accountCheckDigit,
        string $type
    ) {
        $this->holderName = $holderName;
        $this->holderType = $holderType;
        $this->holderDocument = $holderDocument;
        $this->bank = $bank;
        $this->branchNumber = $branchNumber;
        $this->branchCheckDigit = $branchCheckDigit;
        $this->accountNumber = $accountNumber;
        $this->accountCheckDigit = $accountCheckDigit;
        $this->type = $type;
    }

    /**
     * Returns Holder Name.
     * Nome/razão social do favorecido
     */
    public function getHolderName(): string
    {
        return $this->holderName;
    }

    /**
     * Sets Holder Name.
     * Nome/razão social do favorecido
     *
     * @required
     * @maps holder_name
     */
    public function setHolderName(string $holderName): void
    {
        $this->holderName = $holderName;
    }

    /**
     * Returns Holder Type.
     * Tipo de titular (pessoa física ou jurídica)
     */
    public function getHolderType(): string
    {
        return $this->holderType;
    }

    /**
     * Sets Holder Type.
     * Tipo de titular (pessoa física ou jurídica)
     *
     * @required
     * @maps holder_type
     */
    public function setHolderType(string $holderType): void
    {
        $this->holderType = $holderType;
    }

    /**
     * Returns Holder Document.
     * CPF ou CNPJ do favorecido
     */
    public function getHolderDocument(): string
    {
        return $this->holderDocument;
    }

    /**
     * Sets Holder Document.
     * CPF ou CNPJ do favorecido
     *
     * @required
     * @maps holder_document
     */
    public function setHolderDocument(string $holderDocument): void
    {
        $this->holderDocument = $holderDocument;
    }

    /**
     * Returns Bank.
     * Dígitos que identificam cada banco.
     */
    public function getBank(): string
    {
        return $this->bank;
    }

    /**
     * Sets Bank.
     * Dígitos que identificam cada banco.
     *
     * @required
     * @maps bank
     */
    public function setBank(string $bank): void
    {
        $this->bank = $bank;
    }

    /**
     * Returns Branch Number.
     * Número da agência bancária
     */
    public function getBranchNumber(): string
    {
        return $this->branchNumber;
    }

    /**
     * Sets Branch Number.
     * Número da agência bancária
     *
     * @required
     * @maps branch_number
     */
    public function setBranchNumber(string $branchNumber): void
    {
        $this->branchNumber = $branchNumber;
    }

    /**
     * Returns Branch Check Digit.
     * Dígito da agência bancária
     */
    public function getBranchCheckDigit(): string
    {
        return $this->branchCheckDigit;
    }

    /**
     * Sets Branch Check Digit.
     * Dígito da agência bancária
     *
     * @required
     * @maps branch_check_digit
     */
    public function setBranchCheckDigit(string $branchCheckDigit): void
    {
        $this->branchCheckDigit = $branchCheckDigit;
    }

    /**
     * Returns Account Number.
     * Número da conta
     */
    public function getAccountNumber(): string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * Número da conta
     *
     * @required
     * @maps account_number
     */
    public function setAccountNumber(string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Account Check Digit.
     * Dígito verificador da conta
     */
    public function getAccountCheckDigit(): string
    {
        return $this->accountCheckDigit;
    }

    /**
     * Sets Account Check Digit.
     * Dígito verificador da conta
     *
     * @required
     * @maps account_check_digit
     */
    public function setAccountCheckDigit(string $accountCheckDigit): void
    {
        $this->accountCheckDigit = $accountCheckDigit;
    }

    /**
     * Returns Type.
     * Tipo de conta
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Tipo de conta
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['holder_name']         = $this->holderName;
        $json['holder_type']         = $this->holderType;
        $json['holder_document']     = $this->holderDocument;
        $json['bank']                = $this->bank;
        $json['branch_number']       = $this->branchNumber;
        $json['branch_check_digit']  = $this->branchCheckDigit;
        $json['account_number']      = $this->accountNumber;
        $json['account_check_digit'] = $this->accountCheckDigit;
        $json['type']                = $this->type;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
