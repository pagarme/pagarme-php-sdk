<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use stdClass;

class GetAntifraudResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $returnCode = [];

    /**
     * @var array
     */
    private $returnMessage = [];

    /**
     * @var array
     */
    private $providerName = [];

    /**
     * @var array
     */
    private $score = [];

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Return Code.
     */
    public function getReturnCode(): ?string
    {
        if (count($this->returnCode) == 0) {
            return null;
        }
        return $this->returnCode['value'];
    }

    /**
     * Sets Return Code.
     *
     * @maps return_code
     */
    public function setReturnCode(?string $returnCode): void
    {
        $this->returnCode['value'] = $returnCode;
    }

    /**
     * Unsets Return Code.
     */
    public function unsetReturnCode(): void
    {
        $this->returnCode = [];
    }

    /**
     * Returns Return Message.
     */
    public function getReturnMessage(): ?string
    {
        if (count($this->returnMessage) == 0) {
            return null;
        }
        return $this->returnMessage['value'];
    }

    /**
     * Sets Return Message.
     *
     * @maps return_message
     */
    public function setReturnMessage(?string $returnMessage): void
    {
        $this->returnMessage['value'] = $returnMessage;
    }

    /**
     * Unsets Return Message.
     */
    public function unsetReturnMessage(): void
    {
        $this->returnMessage = [];
    }

    /**
     * Returns Provider Name.
     */
    public function getProviderName(): ?string
    {
        if (count($this->providerName) == 0) {
            return null;
        }
        return $this->providerName['value'];
    }

    /**
     * Sets Provider Name.
     *
     * @maps provider_name
     */
    public function setProviderName(?string $providerName): void
    {
        $this->providerName['value'] = $providerName;
    }

    /**
     * Unsets Provider Name.
     */
    public function unsetProviderName(): void
    {
        $this->providerName = [];
    }

    /**
     * Returns Score.
     */
    public function getScore(): ?string
    {
        if (count($this->score) == 0) {
            return null;
        }
        return $this->score['value'];
    }

    /**
     * Sets Score.
     *
     * @maps score
     */
    public function setScore(?string $score): void
    {
        $this->score['value'] = $score;
    }

    /**
     * Unsets Score.
     */
    public function unsetScore(): void
    {
        $this->score = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->status)) {
            $json['status']         = $this->status['value'];
        }
        if (!empty($this->returnCode)) {
            $json['return_code']    = $this->returnCode['value'];
        }
        if (!empty($this->returnMessage)) {
            $json['return_message'] = $this->returnMessage['value'];
        }
        if (!empty($this->providerName)) {
            $json['provider_name']  = $this->providerName['value'];
        }
        if (!empty($this->score)) {
            $json['score']          = $this->score['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
