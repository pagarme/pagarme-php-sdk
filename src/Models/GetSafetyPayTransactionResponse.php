<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\Utils\DateTimeHelper;
use stdClass;

/**
 * Response object for getting a safety pay transaction
 *
 * @discriminator transaction_type
 * @discriminatorType safetypay
 */
class GetSafetyPayTransactionResponse extends GetTransactionResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $url;

    /**
     * @var string|null
     */
    private $bankTid;

    /**
     * @var array
     */
    private $paidAt = [];

    /**
     * @var array
     */
    private $paidAmount = [];

    /**
     * Returns Url.
     * Payment url
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * Payment url
     *
     * @maps url
     */
    public function setUrl(?string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Bank Tid.
     * Transaction identifier on bank
     */
    public function getBankTid(): ?string
    {
        return $this->bankTid;
    }

    /**
     * Sets Bank Tid.
     * Transaction identifier on bank
     *
     * @maps bank_tid
     */
    public function setBankTid(?string $bankTid): void
    {
        $this->bankTid = $bankTid;
    }

    /**
     * Returns Paid At.
     * Payment date
     */
    public function getPaidAt(): ?\DateTime
    {
        if (count($this->paidAt) == 0) {
            return null;
        }
        return $this->paidAt['value'];
    }

    /**
     * Sets Paid At.
     * Payment date
     *
     * @maps paid_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setPaidAt(?\DateTime $paidAt): void
    {
        $this->paidAt['value'] = $paidAt;
    }

    /**
     * Unsets Paid At.
     * Payment date
     */
    public function unsetPaidAt(): void
    {
        $this->paidAt = [];
    }

    /**
     * Returns Paid Amount.
     * Paid amount
     */
    public function getPaidAmount(): ?int
    {
        if (count($this->paidAmount) == 0) {
            return null;
        }
        return $this->paidAmount['value'];
    }

    /**
     * Sets Paid Amount.
     * Paid amount
     *
     * @maps paid_amount
     */
    public function setPaidAmount(?int $paidAmount): void
    {
        $this->paidAmount['value'] = $paidAmount;
    }

    /**
     * Unsets Paid Amount.
     * Paid amount
     */
    public function unsetPaidAmount(): void
    {
        $this->paidAmount = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['url']             = $this->url;
        $json['bank_tid']        = $this->bankTid;
        if (!empty($this->paidAt)) {
            $json['paid_at']     = DateTimeHelper::toRfc3339DateTime($this->paidAt['value']);
        }
        if (!empty($this->paidAmount)) {
            $json['paid_amount'] = $this->paidAmount['value'];
        }
        $json = array_merge($json, parent::jsonSerialize(true));
        $json['transaction_type'] = $this->getTransactionType() ?? 'safetypay';

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
