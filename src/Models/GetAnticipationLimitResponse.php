<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use stdClass;

/**
 * Anticipation limit
 */
class GetAnticipationLimitResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $amount = [];

    /**
     * @var array
     */
    private $anticipationFee = [];

    /**
     * Returns Amount.
     * Amount
     */
    public function getAmount(): ?int
    {
        if (count($this->amount) == 0) {
            return null;
        }
        return $this->amount['value'];
    }

    /**
     * Sets Amount.
     * Amount
     *
     * @maps amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount['value'] = $amount;
    }

    /**
     * Unsets Amount.
     * Amount
     */
    public function unsetAmount(): void
    {
        $this->amount = [];
    }

    /**
     * Returns Anticipation Fee.
     * Anticipation fee
     */
    public function getAnticipationFee(): ?int
    {
        if (count($this->anticipationFee) == 0) {
            return null;
        }
        return $this->anticipationFee['value'];
    }

    /**
     * Sets Anticipation Fee.
     * Anticipation fee
     *
     * @maps anticipation_fee
     */
    public function setAnticipationFee(?int $anticipationFee): void
    {
        $this->anticipationFee['value'] = $anticipationFee;
    }

    /**
     * Unsets Anticipation Fee.
     * Anticipation fee
     */
    public function unsetAnticipationFee(): void
    {
        $this->anticipationFee = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->amount)) {
            $json['amount']           = $this->amount['value'];
        }
        if (!empty($this->anticipationFee)) {
            $json['anticipation_fee'] = $this->anticipationFee['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
