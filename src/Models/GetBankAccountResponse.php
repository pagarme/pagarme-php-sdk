<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\Utils\DateTimeHelper;
use stdClass;

class GetBankAccountResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $id = [];

    /**
     * @var array
     */
    private $holderName = [];

    /**
     * @var array
     */
    private $holderType = [];

    /**
     * @var array
     */
    private $bank = [];

    /**
     * @var array
     */
    private $branchNumber = [];

    /**
     * @var array
     */
    private $branchCheckDigit = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountCheckDigit = [];

    /**
     * @var array
     */
    private $type = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $createdAt = [];

    /**
     * @var array
     */
    private $updatedAt = [];

    /**
     * @var array
     */
    private $deletedAt = [];

    /**
     * @var array
     */
    private $recipient = [];

    /**
     * @var array
     */
    private $metadata = [];

    /**
     * @var array
     */
    private $pixKey = [];

    /**
     * Returns Id.
     * Id
     */
    public function getId(): ?string
    {
        if (count($this->id) == 0) {
            return null;
        }
        return $this->id['value'];
    }

    /**
     * Sets Id.
     * Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id['value'] = $id;
    }

    /**
     * Unsets Id.
     * Id
     */
    public function unsetId(): void
    {
        $this->id = [];
    }

    /**
     * Returns Holder Name.
     * Holder name
     */
    public function getHolderName(): ?string
    {
        if (count($this->holderName) == 0) {
            return null;
        }
        return $this->holderName['value'];
    }

    /**
     * Sets Holder Name.
     * Holder name
     *
     * @maps holder_name
     */
    public function setHolderName(?string $holderName): void
    {
        $this->holderName['value'] = $holderName;
    }

    /**
     * Unsets Holder Name.
     * Holder name
     */
    public function unsetHolderName(): void
    {
        $this->holderName = [];
    }

    /**
     * Returns Holder Type.
     * Holder type
     */
    public function getHolderType(): ?string
    {
        if (count($this->holderType) == 0) {
            return null;
        }
        return $this->holderType['value'];
    }

    /**
     * Sets Holder Type.
     * Holder type
     *
     * @maps holder_type
     */
    public function setHolderType(?string $holderType): void
    {
        $this->holderType['value'] = $holderType;
    }

    /**
     * Unsets Holder Type.
     * Holder type
     */
    public function unsetHolderType(): void
    {
        $this->holderType = [];
    }

    /**
     * Returns Bank.
     * Bank
     */
    public function getBank(): ?string
    {
        if (count($this->bank) == 0) {
            return null;
        }
        return $this->bank['value'];
    }

    /**
     * Sets Bank.
     * Bank
     *
     * @maps bank
     */
    public function setBank(?string $bank): void
    {
        $this->bank['value'] = $bank;
    }

    /**
     * Unsets Bank.
     * Bank
     */
    public function unsetBank(): void
    {
        $this->bank = [];
    }

    /**
     * Returns Branch Number.
     * Branch number
     */
    public function getBranchNumber(): ?string
    {
        if (count($this->branchNumber) == 0) {
            return null;
        }
        return $this->branchNumber['value'];
    }

    /**
     * Sets Branch Number.
     * Branch number
     *
     * @maps branch_number
     */
    public function setBranchNumber(?string $branchNumber): void
    {
        $this->branchNumber['value'] = $branchNumber;
    }

    /**
     * Unsets Branch Number.
     * Branch number
     */
    public function unsetBranchNumber(): void
    {
        $this->branchNumber = [];
    }

    /**
     * Returns Branch Check Digit.
     * Branch check digit
     */
    public function getBranchCheckDigit(): ?string
    {
        if (count($this->branchCheckDigit) == 0) {
            return null;
        }
        return $this->branchCheckDigit['value'];
    }

    /**
     * Sets Branch Check Digit.
     * Branch check digit
     *
     * @maps branch_check_digit
     */
    public function setBranchCheckDigit(?string $branchCheckDigit): void
    {
        $this->branchCheckDigit['value'] = $branchCheckDigit;
    }

    /**
     * Unsets Branch Check Digit.
     * Branch check digit
     */
    public function unsetBranchCheckDigit(): void
    {
        $this->branchCheckDigit = [];
    }

    /**
     * Returns Account Number.
     * Account number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account number
     *
     * @maps account_number
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Check Digit.
     * Account check digit
     */
    public function getAccountCheckDigit(): ?string
    {
        if (count($this->accountCheckDigit) == 0) {
            return null;
        }
        return $this->accountCheckDigit['value'];
    }

    /**
     * Sets Account Check Digit.
     * Account check digit
     *
     * @maps account_check_digit
     */
    public function setAccountCheckDigit(?string $accountCheckDigit): void
    {
        $this->accountCheckDigit['value'] = $accountCheckDigit;
    }

    /**
     * Unsets Account Check Digit.
     * Account check digit
     */
    public function unsetAccountCheckDigit(): void
    {
        $this->accountCheckDigit = [];
    }

    /**
     * Returns Type.
     * Bank account type
     */
    public function getType(): ?string
    {
        if (count($this->type) == 0) {
            return null;
        }
        return $this->type['value'];
    }

    /**
     * Sets Type.
     * Bank account type
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type['value'] = $type;
    }

    /**
     * Unsets Type.
     * Bank account type
     */
    public function unsetType(): void
    {
        $this->type = [];
    }

    /**
     * Returns Status.
     * Bank account status
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Bank account status
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Bank account status
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Created At.
     * Creation date
     */
    public function getCreatedAt(): ?\DateTime
    {
        if (count($this->createdAt) == 0) {
            return null;
        }
        return $this->createdAt['value'];
    }

    /**
     * Sets Created At.
     * Creation date
     *
     * @maps created_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(?\DateTime $createdAt): void
    {
        $this->createdAt['value'] = $createdAt;
    }

    /**
     * Unsets Created At.
     * Creation date
     */
    public function unsetCreatedAt(): void
    {
        $this->createdAt = [];
    }

    /**
     * Returns Updated At.
     * Last update date
     */
    public function getUpdatedAt(): ?\DateTime
    {
        if (count($this->updatedAt) == 0) {
            return null;
        }
        return $this->updatedAt['value'];
    }

    /**
     * Sets Updated At.
     * Last update date
     *
     * @maps updated_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedAt(?\DateTime $updatedAt): void
    {
        $this->updatedAt['value'] = $updatedAt;
    }

    /**
     * Unsets Updated At.
     * Last update date
     */
    public function unsetUpdatedAt(): void
    {
        $this->updatedAt = [];
    }

    /**
     * Returns Deleted At.
     * Deletion date
     */
    public function getDeletedAt(): ?\DateTime
    {
        if (count($this->deletedAt) == 0) {
            return null;
        }
        return $this->deletedAt['value'];
    }

    /**
     * Sets Deleted At.
     * Deletion date
     *
     * @maps deleted_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDeletedAt(?\DateTime $deletedAt): void
    {
        $this->deletedAt['value'] = $deletedAt;
    }

    /**
     * Unsets Deleted At.
     * Deletion date
     */
    public function unsetDeletedAt(): void
    {
        $this->deletedAt = [];
    }

    /**
     * Returns Recipient.
     * Recipient
     */
    public function getRecipient(): ?GetRecipientResponse
    {
        if (count($this->recipient) == 0) {
            return null;
        }
        return $this->recipient['value'];
    }

    /**
     * Sets Recipient.
     * Recipient
     *
     * @maps recipient
     */
    public function setRecipient(?GetRecipientResponse $recipient): void
    {
        $this->recipient['value'] = $recipient;
    }

    /**
     * Unsets Recipient.
     * Recipient
     */
    public function unsetRecipient(): void
    {
        $this->recipient = [];
    }

    /**
     * Returns Metadata.
     * Metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        if (count($this->metadata) == 0) {
            return null;
        }
        return $this->metadata['value'];
    }

    /**
     * Sets Metadata.
     * Metadata
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata['value'] = $metadata;
    }

    /**
     * Unsets Metadata.
     * Metadata
     */
    public function unsetMetadata(): void
    {
        $this->metadata = [];
    }

    /**
     * Returns Pix Key.
     * Pix Key
     */
    public function getPixKey(): ?string
    {
        if (count($this->pixKey) == 0) {
            return null;
        }
        return $this->pixKey['value'];
    }

    /**
     * Sets Pix Key.
     * Pix Key
     *
     * @maps pix_key
     */
    public function setPixKey(?string $pixKey): void
    {
        $this->pixKey['value'] = $pixKey;
    }

    /**
     * Unsets Pix Key.
     * Pix Key
     */
    public function unsetPixKey(): void
    {
        $this->pixKey = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->id)) {
            $json['id']                  = $this->id['value'];
        }
        if (!empty($this->holderName)) {
            $json['holder_name']         = $this->holderName['value'];
        }
        if (!empty($this->holderType)) {
            $json['holder_type']         = $this->holderType['value'];
        }
        if (!empty($this->bank)) {
            $json['bank']                = $this->bank['value'];
        }
        if (!empty($this->branchNumber)) {
            $json['branch_number']       = $this->branchNumber['value'];
        }
        if (!empty($this->branchCheckDigit)) {
            $json['branch_check_digit']  = $this->branchCheckDigit['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['account_number']      = $this->accountNumber['value'];
        }
        if (!empty($this->accountCheckDigit)) {
            $json['account_check_digit'] = $this->accountCheckDigit['value'];
        }
        if (!empty($this->type)) {
            $json['type']                = $this->type['value'];
        }
        if (!empty($this->status)) {
            $json['status']              = $this->status['value'];
        }
        if (!empty($this->createdAt)) {
            $json['created_at']          = DateTimeHelper::toRfc3339DateTime($this->createdAt['value']);
        }
        if (!empty($this->updatedAt)) {
            $json['updated_at']          = DateTimeHelper::toRfc3339DateTime($this->updatedAt['value']);
        }
        if (!empty($this->deletedAt)) {
            $json['deleted_at']          = DateTimeHelper::toRfc3339DateTime($this->deletedAt['value']);
        }
        if (!empty($this->recipient)) {
            $json['recipient']           = $this->recipient['value'];
        }
        if (!empty($this->metadata)) {
            $json['metadata']            = $this->metadata['value'];
        }
        if (!empty($this->pixKey)) {
            $json['pix_key']             = $this->pixKey['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
