<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use stdClass;

/**
 * Response object for getting a pricing scheme
 */
class GetPricingSchemeResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $price = [];

    /**
     * @var array
     */
    private $schemeType = [];

    /**
     * @var array
     */
    private $priceBrackets = [];

    /**
     * @var array
     */
    private $minimumPrice = [];

    /**
     * @var array
     */
    private $percentage = [];

    /**
     * Returns Price.
     */
    public function getPrice(): ?int
    {
        if (count($this->price) == 0) {
            return null;
        }
        return $this->price['value'];
    }

    /**
     * Sets Price.
     *
     * @maps price
     */
    public function setPrice(?int $price): void
    {
        $this->price['value'] = $price;
    }

    /**
     * Unsets Price.
     */
    public function unsetPrice(): void
    {
        $this->price = [];
    }

    /**
     * Returns Scheme Type.
     */
    public function getSchemeType(): ?string
    {
        if (count($this->schemeType) == 0) {
            return null;
        }
        return $this->schemeType['value'];
    }

    /**
     * Sets Scheme Type.
     *
     * @maps scheme_type
     */
    public function setSchemeType(?string $schemeType): void
    {
        $this->schemeType['value'] = $schemeType;
    }

    /**
     * Unsets Scheme Type.
     */
    public function unsetSchemeType(): void
    {
        $this->schemeType = [];
    }

    /**
     * Returns Price Brackets.
     *
     * @return GetPriceBracketResponse[]|null
     */
    public function getPriceBrackets(): ?array
    {
        if (count($this->priceBrackets) == 0) {
            return null;
        }
        return $this->priceBrackets['value'];
    }

    /**
     * Sets Price Brackets.
     *
     * @maps price_brackets
     *
     * @param GetPriceBracketResponse[]|null $priceBrackets
     */
    public function setPriceBrackets(?array $priceBrackets): void
    {
        $this->priceBrackets['value'] = $priceBrackets;
    }

    /**
     * Unsets Price Brackets.
     */
    public function unsetPriceBrackets(): void
    {
        $this->priceBrackets = [];
    }

    /**
     * Returns Minimum Price.
     */
    public function getMinimumPrice(): ?int
    {
        if (count($this->minimumPrice) == 0) {
            return null;
        }
        return $this->minimumPrice['value'];
    }

    /**
     * Sets Minimum Price.
     *
     * @maps minimum_price
     */
    public function setMinimumPrice(?int $minimumPrice): void
    {
        $this->minimumPrice['value'] = $minimumPrice;
    }

    /**
     * Unsets Minimum Price.
     */
    public function unsetMinimumPrice(): void
    {
        $this->minimumPrice = [];
    }

    /**
     * Returns Percentage.
     * percentual value used in pricing_scheme Percent
     */
    public function getPercentage(): ?float
    {
        if (count($this->percentage) == 0) {
            return null;
        }
        return $this->percentage['value'];
    }

    /**
     * Sets Percentage.
     * percentual value used in pricing_scheme Percent
     *
     * @maps percentage
     */
    public function setPercentage(?float $percentage): void
    {
        $this->percentage['value'] = $percentage;
    }

    /**
     * Unsets Percentage.
     * percentual value used in pricing_scheme Percent
     */
    public function unsetPercentage(): void
    {
        $this->percentage = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->price)) {
            $json['price']          = $this->price['value'];
        }
        if (!empty($this->schemeType)) {
            $json['scheme_type']    = $this->schemeType['value'];
        }
        if (!empty($this->priceBrackets)) {
            $json['price_brackets'] = $this->priceBrackets['value'];
        }
        if (!empty($this->minimumPrice)) {
            $json['minimum_price']  = $this->minimumPrice['value'];
        }
        if (!empty($this->percentage)) {
            $json['percentage']     = $this->percentage['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
