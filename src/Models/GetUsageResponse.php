<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\Utils\DateTimeHelper;
use stdClass;

/**
 * Response object for getting a usage
 */
class GetUsageResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $id = [];

    /**
     * @var array
     */
    private $quantity = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array
     */
    private $usedAt = [];

    /**
     * @var array
     */
    private $createdAt = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $deletedAt = [];

    /**
     * @var array
     */
    private $subscriptionItem = [];

    /**
     * @var array
     */
    private $code = [];

    /**
     * @var array
     */
    private $group = [];

    /**
     * @var array
     */
    private $amount = [];

    /**
     * Returns Id.
     * Id
     */
    public function getId(): ?string
    {
        if (count($this->id) == 0) {
            return null;
        }
        return $this->id['value'];
    }

    /**
     * Sets Id.
     * Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id['value'] = $id;
    }

    /**
     * Unsets Id.
     * Id
     */
    public function unsetId(): void
    {
        $this->id = [];
    }

    /**
     * Returns Quantity.
     * Quantity
     */
    public function getQuantity(): ?int
    {
        if (count($this->quantity) == 0) {
            return null;
        }
        return $this->quantity['value'];
    }

    /**
     * Sets Quantity.
     * Quantity
     *
     * @maps quantity
     */
    public function setQuantity(?int $quantity): void
    {
        $this->quantity['value'] = $quantity;
    }

    /**
     * Unsets Quantity.
     * Quantity
     */
    public function unsetQuantity(): void
    {
        $this->quantity = [];
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Used At.
     * Used at
     */
    public function getUsedAt(): ?\DateTime
    {
        if (count($this->usedAt) == 0) {
            return null;
        }
        return $this->usedAt['value'];
    }

    /**
     * Sets Used At.
     * Used at
     *
     * @maps used_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUsedAt(?\DateTime $usedAt): void
    {
        $this->usedAt['value'] = $usedAt;
    }

    /**
     * Unsets Used At.
     * Used at
     */
    public function unsetUsedAt(): void
    {
        $this->usedAt = [];
    }

    /**
     * Returns Created At.
     * Creation date
     */
    public function getCreatedAt(): ?\DateTime
    {
        if (count($this->createdAt) == 0) {
            return null;
        }
        return $this->createdAt['value'];
    }

    /**
     * Sets Created At.
     * Creation date
     *
     * @maps created_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(?\DateTime $createdAt): void
    {
        $this->createdAt['value'] = $createdAt;
    }

    /**
     * Unsets Created At.
     * Creation date
     */
    public function unsetCreatedAt(): void
    {
        $this->createdAt = [];
    }

    /**
     * Returns Status.
     * Status
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Status
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Status
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Deleted At.
     */
    public function getDeletedAt(): ?\DateTime
    {
        if (count($this->deletedAt) == 0) {
            return null;
        }
        return $this->deletedAt['value'];
    }

    /**
     * Sets Deleted At.
     *
     * @maps deleted_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setDeletedAt(?\DateTime $deletedAt): void
    {
        $this->deletedAt['value'] = $deletedAt;
    }

    /**
     * Unsets Deleted At.
     */
    public function unsetDeletedAt(): void
    {
        $this->deletedAt = [];
    }

    /**
     * Returns Subscription Item.
     * Subscription item
     */
    public function getSubscriptionItem(): ?GetSubscriptionItemResponse
    {
        if (count($this->subscriptionItem) == 0) {
            return null;
        }
        return $this->subscriptionItem['value'];
    }

    /**
     * Sets Subscription Item.
     * Subscription item
     *
     * @maps subscription_item
     */
    public function setSubscriptionItem(?GetSubscriptionItemResponse $subscriptionItem): void
    {
        $this->subscriptionItem['value'] = $subscriptionItem;
    }

    /**
     * Unsets Subscription Item.
     * Subscription item
     */
    public function unsetSubscriptionItem(): void
    {
        $this->subscriptionItem = [];
    }

    /**
     * Returns Code.
     * Identification code in the client system
     */
    public function getCode(): ?string
    {
        if (count($this->code) == 0) {
            return null;
        }
        return $this->code['value'];
    }

    /**
     * Sets Code.
     * Identification code in the client system
     *
     * @maps code
     */
    public function setCode(?string $code): void
    {
        $this->code['value'] = $code;
    }

    /**
     * Unsets Code.
     * Identification code in the client system
     */
    public function unsetCode(): void
    {
        $this->code = [];
    }

    /**
     * Returns Group.
     * Identification group in the client system
     */
    public function getGroup(): ?string
    {
        if (count($this->group) == 0) {
            return null;
        }
        return $this->group['value'];
    }

    /**
     * Sets Group.
     * Identification group in the client system
     *
     * @maps group
     */
    public function setGroup(?string $group): void
    {
        $this->group['value'] = $group;
    }

    /**
     * Unsets Group.
     * Identification group in the client system
     */
    public function unsetGroup(): void
    {
        $this->group = [];
    }

    /**
     * Returns Amount.
     * Field used in item scheme type 'Percent'
     */
    public function getAmount(): ?int
    {
        if (count($this->amount) == 0) {
            return null;
        }
        return $this->amount['value'];
    }

    /**
     * Sets Amount.
     * Field used in item scheme type 'Percent'
     *
     * @maps amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount['value'] = $amount;
    }

    /**
     * Unsets Amount.
     * Field used in item scheme type 'Percent'
     */
    public function unsetAmount(): void
    {
        $this->amount = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->id)) {
            $json['id']                = $this->id['value'];
        }
        if (!empty($this->quantity)) {
            $json['quantity']          = $this->quantity['value'];
        }
        if (!empty($this->description)) {
            $json['description']       = $this->description['value'];
        }
        if (!empty($this->usedAt)) {
            $json['used_at']           = DateTimeHelper::toRfc3339DateTime($this->usedAt['value']);
        }
        if (!empty($this->createdAt)) {
            $json['created_at']        = DateTimeHelper::toRfc3339DateTime($this->createdAt['value']);
        }
        if (!empty($this->status)) {
            $json['status']            = $this->status['value'];
        }
        if (!empty($this->deletedAt)) {
            $json['deleted_at']        = DateTimeHelper::toRfc3339DateTime($this->deletedAt['value']);
        }
        if (!empty($this->subscriptionItem)) {
            $json['subscription_item'] = $this->subscriptionItem['value'];
        }
        if (!empty($this->code)) {
            $json['code']              = $this->code['value'];
        }
        if (!empty($this->group)) {
            $json['group']             = $this->group['value'];
        }
        if (!empty($this->amount)) {
            $json['amount']            = $this->amount['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
