<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\Utils\DateTimeHelper;
use stdClass;

/**
 * Anticipation
 */
class GetAnticipationResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $id = [];

    /**
     * @var array
     */
    private $requestedAmount = [];

    /**
     * @var array
     */
    private $approvedAmount = [];

    /**
     * @var array
     */
    private $recipient = [];

    /**
     * @var array
     */
    private $pgid = [];

    /**
     * @var array
     */
    private $createdAt = [];

    /**
     * @var array
     */
    private $updatedAt = [];

    /**
     * @var array
     */
    private $paymentDate = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $timeframe = [];

    /**
     * Returns Id.
     * Id
     */
    public function getId(): ?string
    {
        if (count($this->id) == 0) {
            return null;
        }
        return $this->id['value'];
    }

    /**
     * Sets Id.
     * Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id['value'] = $id;
    }

    /**
     * Unsets Id.
     * Id
     */
    public function unsetId(): void
    {
        $this->id = [];
    }

    /**
     * Returns Requested Amount.
     * Requested amount
     */
    public function getRequestedAmount(): ?int
    {
        if (count($this->requestedAmount) == 0) {
            return null;
        }
        return $this->requestedAmount['value'];
    }

    /**
     * Sets Requested Amount.
     * Requested amount
     *
     * @maps requested_amount
     */
    public function setRequestedAmount(?int $requestedAmount): void
    {
        $this->requestedAmount['value'] = $requestedAmount;
    }

    /**
     * Unsets Requested Amount.
     * Requested amount
     */
    public function unsetRequestedAmount(): void
    {
        $this->requestedAmount = [];
    }

    /**
     * Returns Approved Amount.
     * Approved amount
     */
    public function getApprovedAmount(): ?int
    {
        if (count($this->approvedAmount) == 0) {
            return null;
        }
        return $this->approvedAmount['value'];
    }

    /**
     * Sets Approved Amount.
     * Approved amount
     *
     * @maps approved_amount
     */
    public function setApprovedAmount(?int $approvedAmount): void
    {
        $this->approvedAmount['value'] = $approvedAmount;
    }

    /**
     * Unsets Approved Amount.
     * Approved amount
     */
    public function unsetApprovedAmount(): void
    {
        $this->approvedAmount = [];
    }

    /**
     * Returns Recipient.
     * Recipient
     */
    public function getRecipient(): ?GetRecipientResponse
    {
        if (count($this->recipient) == 0) {
            return null;
        }
        return $this->recipient['value'];
    }

    /**
     * Sets Recipient.
     * Recipient
     *
     * @maps recipient
     */
    public function setRecipient(?GetRecipientResponse $recipient): void
    {
        $this->recipient['value'] = $recipient;
    }

    /**
     * Unsets Recipient.
     * Recipient
     */
    public function unsetRecipient(): void
    {
        $this->recipient = [];
    }

    /**
     * Returns Pgid.
     * Anticipation id on the gateway
     */
    public function getPgid(): ?string
    {
        if (count($this->pgid) == 0) {
            return null;
        }
        return $this->pgid['value'];
    }

    /**
     * Sets Pgid.
     * Anticipation id on the gateway
     *
     * @maps pgid
     */
    public function setPgid(?string $pgid): void
    {
        $this->pgid['value'] = $pgid;
    }

    /**
     * Unsets Pgid.
     * Anticipation id on the gateway
     */
    public function unsetPgid(): void
    {
        $this->pgid = [];
    }

    /**
     * Returns Created At.
     * Creation date
     */
    public function getCreatedAt(): ?\DateTime
    {
        if (count($this->createdAt) == 0) {
            return null;
        }
        return $this->createdAt['value'];
    }

    /**
     * Sets Created At.
     * Creation date
     *
     * @maps created_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(?\DateTime $createdAt): void
    {
        $this->createdAt['value'] = $createdAt;
    }

    /**
     * Unsets Created At.
     * Creation date
     */
    public function unsetCreatedAt(): void
    {
        $this->createdAt = [];
    }

    /**
     * Returns Updated At.
     * Last update date
     */
    public function getUpdatedAt(): ?\DateTime
    {
        if (count($this->updatedAt) == 0) {
            return null;
        }
        return $this->updatedAt['value'];
    }

    /**
     * Sets Updated At.
     * Last update date
     *
     * @maps updated_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedAt(?\DateTime $updatedAt): void
    {
        $this->updatedAt['value'] = $updatedAt;
    }

    /**
     * Unsets Updated At.
     * Last update date
     */
    public function unsetUpdatedAt(): void
    {
        $this->updatedAt = [];
    }

    /**
     * Returns Payment Date.
     * Payment date
     */
    public function getPaymentDate(): ?\DateTime
    {
        if (count($this->paymentDate) == 0) {
            return null;
        }
        return $this->paymentDate['value'];
    }

    /**
     * Sets Payment Date.
     * Payment date
     *
     * @maps payment_date
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setPaymentDate(?\DateTime $paymentDate): void
    {
        $this->paymentDate['value'] = $paymentDate;
    }

    /**
     * Unsets Payment Date.
     * Payment date
     */
    public function unsetPaymentDate(): void
    {
        $this->paymentDate = [];
    }

    /**
     * Returns Status.
     * Status
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Status
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Status
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Timeframe.
     * Timeframe
     */
    public function getTimeframe(): ?string
    {
        if (count($this->timeframe) == 0) {
            return null;
        }
        return $this->timeframe['value'];
    }

    /**
     * Sets Timeframe.
     * Timeframe
     *
     * @maps timeframe
     */
    public function setTimeframe(?string $timeframe): void
    {
        $this->timeframe['value'] = $timeframe;
    }

    /**
     * Unsets Timeframe.
     * Timeframe
     */
    public function unsetTimeframe(): void
    {
        $this->timeframe = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->id)) {
            $json['id']               = $this->id['value'];
        }
        if (!empty($this->requestedAmount)) {
            $json['requested_amount'] = $this->requestedAmount['value'];
        }
        if (!empty($this->approvedAmount)) {
            $json['approved_amount']  = $this->approvedAmount['value'];
        }
        if (!empty($this->recipient)) {
            $json['recipient']        = $this->recipient['value'];
        }
        if (!empty($this->pgid)) {
            $json['pgid']             = $this->pgid['value'];
        }
        if (!empty($this->createdAt)) {
            $json['created_at']       = DateTimeHelper::toRfc3339DateTime($this->createdAt['value']);
        }
        if (!empty($this->updatedAt)) {
            $json['updated_at']       = DateTimeHelper::toRfc3339DateTime($this->updatedAt['value']);
        }
        if (!empty($this->paymentDate)) {
            $json['payment_date']     = DateTimeHelper::toRfc3339DateTime($this->paymentDate['value']);
        }
        if (!empty($this->status)) {
            $json['status']           = $this->status['value'];
        }
        if (!empty($this->timeframe)) {
            $json['timeframe']        = $this->timeframe['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
